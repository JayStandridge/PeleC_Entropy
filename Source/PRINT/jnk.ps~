%!PS-Adobe-3.0
%%Title: React.cpp
%%For: Jay Standridge
%%Creator: a2ps version 4.14
%%CreationDate: Mon Feb  6 10:58:45 2023
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <AMReX_FArrayBox.H>) p n
() N
(#include) K
( ") p
(IndexDefines.H) str
(") p n
(#include) K
( ") p
(PelePhysics.H) str
(") p n
(#include) K
( ") p
(PeleC.H) str
(") p n
() N
(void) k n
(PeleC::set_typical_values_chem\(\)) p n
({) N
(  ) S
(if) K
( \(use_typical_vals_chem_usr\) {) p n
(    reactor->set_typ_vals_ode\(typical_values_chem_usr\);) N
(  } ) S
(else) K
( {) p n
(    ) S
(const) K
( amrex::MultiFab& S_new = get_new_data\(State_Type\);) p n
(    amrex::Real minTemp = S_new.min\(UTEMP\);) N
(    amrex::Real maxTemp = S_new.max\(UTEMP\);) N
(    amrex::Vector<amrex::Real> typical_values_chem\(NUM_SPECIES + 1, 1e-10\);) N
() N
(    ) S
(for) K
( \() p
(int) k
( sp = 0; sp < NUM_SPECIES; sp++\) {) p n
(      amrex::Real rhoYs_min = S_new.min\(UFS + sp\);) N
(      amrex::Real rhoYs_max = S_new.max\(UFS + sp\);) N
(      typical_values_chem[sp] = amrex::max<amrex::Real>\() N
(        0.5 * \(rhoYs_min + rhoYs_max\), typical_rhoY_val_min\);) N
(    }) N
(    typical_values_chem[NUM_SPECIES] = 0.5 * \(minTemp + maxTemp\);) N
(    reactor->set_typ_vals_ode\(typical_values_chem\);) N
(  }) N
(}) N
() N
(void) k n
(PeleC::react_state\() p n
(  amrex::Real ) S
(/*time*/) c
(,) p n
(  amrex::Real dt,) N
(  ) S
(bool) k
( react_init,) p n
(  amrex::MultiFab* aux_src\)) N
({) N
(  ) S
(// Update I_R, and recompute S_new) c n
(  BL_PROFILE\(") p
(PeleC::react_state\(\)) str
("\);) p n
() N
(  ) S
(const) K
( amrex::Real strt_time = amrex::ParallelDescriptor::second\(\);) p n
() N
(  AMREX_ASSERT\(do_react == 1\);) N
() N
(  ) S
(if) K
( \(\(verbose != 0\) && amrex::ParallelDescriptor::IOProcessor\(\)\) {) p n
(    ) S
(if) K
( \(react_init\) {) p n
(      amrex::Print\(\) << ") S
(... Initializing reactions, using interval dt = ) str
(" << dt) p n
(                     << std::endl;) N
(    } ) S
(else) K
( {) p n
(      amrex::Print\(\) << ") S
(... Computing reactions for dt = ) str
(" << dt << std::endl;) p n
(    }) N
(  }) N
() N
(  amrex::MultiFab& S_new = get_new_data\(State_Type\);) N
(  ) S
(const) K
( ) p
(int) k
( ng = S_new.nGrow\(\);) p n
(  prefetchToDevice\(S_new\);) N
() N
(  ) S
(// Create a MultiFab with all of the non-reacting source terms.) c n
(  amrex::MultiFab non_react_src_tmp;) p n
(  amrex::MultiFab* non_react_src = nullptr;) N
() N
(  ) S
(if) K
( \(react_init\) {) p n
(    non_react_src_tmp.define\(grids, dmap, NVAR, ng, amrex::MFInfo\(\), Factory\(\)\);) N
(    non_react_src_tmp.setVal\(0\);) N
(    non_react_src = &non_react_src_tmp;) N
(  } ) S
(else) K
( {) p n
(    ) S
(// Only do this if we are not at the first step) c n
(    ) p
(// Build non-reacting source term, and an S_new that does not include) c n
(    ) p
(// reactions) c n
(    ) p
(if) K
( \(aux_src == nullptr\) {) p n
(      non_react_src_tmp.define\() N
(React.cpp) (Page 1/5) (Dec 01, 22 11:33) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        grids, dmap, NVAR, ng, amrex::MFInfo\(\), Factory\(\)\);) p n
(      non_react_src_tmp.setVal\(0\);) N
(      non_react_src = &non_react_src_tmp;) N
() N
(      ) S
(for) K
( \() p
(int) k
( n = 0; n < src_list.size\(\); ++n\) {) p n
(        amrex::MultiFab::Saxpy\() N
(          non_react_src_tmp, 0.5, *new_sources[src_list[n]], 0, 0, NVAR, ng\);) N
(        amrex::MultiFab::Saxpy\() N
(          non_react_src_tmp, 0.5, *old_sources[src_list[n]], 0, 0, NVAR, ng\);) N
(      }) N
() N
(      ) S
(if) K
( \(do_hydro && !do_mol\) {) p n
(        amrex::MultiFab::Add\(non_react_src_tmp, hydro_source, 0, 0, NVAR, ng\);) N
(      }) N
(    } ) S
(else) K
( {) p n
(      ) S
(// in MOL update all non-reacting sources) c n
(      ) p
(// are passed into auxillary sources) c n
(      non_react_src = aux_src;) p n
(    }) N
() N
(    ) S
(// S_new = S_old + dt*\(non reacting source terms\)) c n
(    ) p
(const) K
( amrex::MultiFab& S_old = get_old_data\(State_Type\);) p n
(    amrex::MultiFab::Copy\(S_new, S_old, 0, 0, NVAR, ng\);) N
(    amrex::MultiFab::Saxpy\(S_new, dt, *non_react_src, 0, 0, NVAR, ng\);) N
(  }) N
() N
(  amrex::MultiFab& react_src = get_new_data\(Reactions_Type\);) N
(  react_src.setVal\(0.0\);) N
(  prefetchToDevice\(react_src\);) N
() N
(  ) S
(// for sundials box integration) c n
(  amrex::MultiFab STemp\(grids, dmap, NUM_SPECIES + 2, 0\);) p n
(  amrex::MultiFab extsrc_rY\(grids, dmap, NUM_SPECIES, 0\);) N
(  amrex::MultiFab extsrc_rE\(grids, dmap, 1, 0\);) N
(  amrex::iMultiFab dummyMask\(grids, dmap, 1, 0\);) N
(  amrex::MultiFab fctCount\(grids, dmap, 1, 0\);) N
(  dummyMask.setVal\(1\);) N
() N
(  ) S
(if) K
( \(!react_init\) {) p n
(    ) S
(const) K
( amrex::MultiFab& S_old = get_old_data\(State_Type\);) p n
(    amrex::MultiFab::Copy\(STemp, S_old, UFS, 0, NUM_SPECIES, STemp.nGrow\(\)\);) N
(    amrex::MultiFab::Copy\(STemp, S_old, UTEMP, NUM_SPECIES, 1, STemp.nGrow\(\)\);) N
(    amrex::MultiFab::Copy\() N
(      STemp, S_old, UEINT, NUM_SPECIES + 1, 1, STemp.nGrow\(\)\);) N
(  } ) S
(else) K
( {) p n
(    amrex::MultiFab::Copy\(STemp, S_new, UFS, 0, NUM_SPECIES, STemp.nGrow\(\)\);) N
(    amrex::MultiFab::Copy\(STemp, S_new, UTEMP, NUM_SPECIES, 1, STemp.nGrow\(\)\);) N
(    amrex::MultiFab::Copy\() N
(      STemp, S_new, UEINT, NUM_SPECIES + 1, 1, STemp.nGrow\(\)\);) N
(  }) N
(  amrex::MultiFab::Copy\() N
(    extsrc_rY, *non_react_src, UFS, 0, NUM_SPECIES, STemp.nGrow\(\)\);) N
() N
(  ) S
(auto) K
( ) p
(const) K
(& fact =) p n
(    ) S
(dynamic_cast) k
(<amrex::EBFArrayBoxFactory ) p
(const) K
(&>\(S_new.Factory\(\)\);) p n
(  ) S
(auto) K
( ) p
(const) K
(& flags = fact.getMultiEBCellFlagFab\(\);) p n
() N
(#ifdef) K
( AMREX_USE_OMP) p n
(#pragma) K
( omp parallel ) p
(if) K
( \(amrex::Gpu::notInLaunchRegion\(\)\)) p n
(#endif) K n
(  {) p n
(    ) S
(for) K
( \(amrex::MFIter mfi\(S_new, amrex::TilingIfNotGPU\(\)\); mfi.isValid\(\);) p n
(         ++mfi\) {) N
() N
(      ) S
(const) K
( amrex::Box& bx = mfi.growntilebox\(ng\);) p n
() N
(      ) S
(// old state or the state at t=0) c n
(      ) p
(auto) K
( ) p
(const) K
(& sold_arr =) p n
(        react_init ? S_new.array\(mfi\) : get_old_data\(State_Type\).array\(mfi\);) N
(React.cpp) (Page 2/5) (Dec 01, 22 11:33) title
border
grestore
(Printed by Jay Standridge) rhead
(React.cpp) (1/3) (Monday February 06, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(      ) S
(// new state) c n
(      ) p
(auto) K
( ) p
(const) K
(& snew_arr = S_new.array\(mfi\);) p n
(      ) S
(auto) K
( ) p
(const) K
(& nonrs_arr = non_react_src->array\(mfi\);) p n
(      ) S
(auto) K
( ) p
(const) K
(& I_R = react_src.array\(mfi\);) p n
() N
(      ) S
(// only update beyond first step) c n
(      ) p
(// TODO: Update here? Or just get reaction source?) c n
(      ) p
(const) K
( ) p
(bool) k
( do_update = !react_init;) p n
() N
(      ) S
(const) K
( ) p
(auto) K
(& flag_fab = flags[mfi];) p n
(      amrex::FabType typ = flag_fab.getType\(bx\);) N
(      ) S
(if) K
( \(typ == amrex::FabType::covered\) {) p n
(        ) S
(if) K
( \(do_react_load_balance\) {) p n
(          ) S
(const) K
( amrex::Box vbox = mfi.tilebox\(\);) p n
(          get_new_data\(Work_Estimate_Type\)[mfi].plus<amrex::RunOn::Device>\() N
(            0.0, vbox\);) N
(        }) N
(        ) S
(continue) K
(;) p n
(      }) N
(      ) S
(if) K
( \() p n
(        \(typ == amrex::FabType::singlevalued\) ||) N
(        \(typ == amrex::FabType::regular\)\) {) N
(        amrex::Real wt =) N
(          amrex::ParallelDescriptor::second\(\); ) S
(// timing for each fab) c n
() p n
(        amrex::Real current_time = 0.0;) N
() N
(        ) S
(auto) K
( ) p
(const) K
(& rhoY = STemp.array\(mfi\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& T = STemp.array\(mfi, NUM_SPECIES\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& rhoE = STemp.array\(mfi, NUM_SPECIES + 1\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& frcExt = extsrc_rY.array\(mfi\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& frcEExt = extsrc_rE.array\(mfi\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& mask = dummyMask.array\(mfi\);) p n
(        ) S
(auto) K
( ) p
(const) K
(& fc = fctCount.array\(mfi\);) p n
() N
(        amrex::ParallelFor\() N
(          bx, [=] AMREX_GPU_DEVICE\() S
(int) k
( i, ) p
(int) k
( j, ) p
(int) k
( k\) noexcept {) p n
(            ) S
(// work on old state) c n
(            amrex::Real rhou = sold_arr\(i, j, k, UMX\);) p n
(            amrex::Real rhov = sold_arr\(i, j, k, UMY\);) N
(            amrex::Real rhow = sold_arr\(i, j, k, UMZ\);) N
(            amrex::Real rho_old = sold_arr\(i, j, k, URHO\);) N
(            amrex::Real rhoInv = 1.0 / rho_old;) N
() N
(            amrex::Real e_old =) N
(              \(sold_arr\(i, j, k, UEDEN\) ) S
(// total energy) c n
(               - 0.5 * \(rhou * rhou + rhov * rhov + rhow * rhow\) * rhoInv\) ) p
(// KE) c n
(              * rhoInv;) p n
() N
(            ) S
(// work on new state) c n
(            rhou = snew_arr\(i, j, k, UMX\);) p n
(            rhov = snew_arr\(i, j, k, UMY\);) N
(            rhow = snew_arr\(i, j, k, UMZ\);) N
(            rhoInv = 1.0 / snew_arr\(i, j, k, URHO\);) N
() N
(            amrex::Real rhoedot_ext =) N
(              \(snew_arr\(i, j, k, UEDEN\) ) S
(// new total energy) c n
(               - 0.5 * \(rhou * rhou + rhov * rhov + rhow * rhow\) *) p n
(                   rhoInv ) S
(// new KE) c n
(               - rho_old * e_old\) /) p n
(              dt;) N
() N
(            frcEExt\(i, j, k\) = rhoedot_ext;) N
(          }\);) N
() N
(        reactor->react\() N
(          bx, rhoY, frcExt, T, rhoE, frcEExt, fc, mask, dt, current_time) N
(#ifdef) K
( AMREX_USE_GPU) p n
(React.cpp) (Page 3/5) (Dec 01, 22 11:33) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ,) p n
(          amrex::Gpu::gpuStream\(\)) N
(#endif) K n
(        \);) p n
() N
(        amrex::Gpu::Device::streamSynchronize\(\);) N
() N
(        ) S
(// unpack data) c n
(        amrex::ParallelFor\() p n
(          bx, [=] AMREX_GPU_DEVICE\() S
(int) k
( i, ) p
(int) k
( j, ) p
(int) k
( k\) noexcept {) p n
(            ) S
(// work on old state) c n
(            amrex::Real rhou = sold_arr\(i, j, k, UMX\);) p n
(            amrex::Real rhov = sold_arr\(i, j, k, UMY\);) N
(            amrex::Real rhow = sold_arr\(i, j, k, UMZ\);) N
(            amrex::Real rho_old = sold_arr\(i, j, k, URHO\);) N
(            amrex::Real rhoInv = 1.0 / rho_old;) N
() N
(            amrex::Real e_old =) N
(              \(sold_arr\(i, j, k, UEDEN\) ) S
(// old total energy) c n
(               - 0.5 * \(rhou * rhou + rhov * rhov + rhow * rhow\) * rhoInv\) ) p
(// KE) c n
(              * rhoInv;) p n
() N
(            rhou = snew_arr\(i, j, k, UMX\);) N
(            rhov = snew_arr\(i, j, k, UMY\);) N
(            rhow = snew_arr\(i, j, k, UMZ\);) N
(            rhoInv = 1.0 / snew_arr\(i, j, k, URHO\);) N
() N
(            amrex::Real rhoedot_ext =) N
(              \(snew_arr\(i, j, k, UEDEN\) ) S
(// new total energy) c n
(               - 0.5 * \(rhou * rhou + rhov * rhov + rhow * rhow\) * rhoInv ) p
(// KE) c n
(               - rho_old * e_old\) ) p
(// old internal energy) c n
(              / dt;) p n
() N
(            amrex::Real umnew =) N
(              sold_arr\(i, j, k, UMX\) + dt * nonrs_arr\(i, j, k, UMX\);) N
(            amrex::Real vmnew =) N
(              sold_arr\(i, j, k, UMY\) + dt * nonrs_arr\(i, j, k, UMY\);) N
(            amrex::Real wmnew =) N
(              sold_arr\(i, j, k, UMZ\) + dt * nonrs_arr\(i, j, k, UMZ\);) N
() N
(            ) S
(// get new rho) c n
(            amrex::Real rhonew = 0.0;) p n
() N
(            ) S
(for) K
( \() p
(int) k
( nsp = 0; nsp < NUM_SPECIES; nsp++\) {) p n
(              rhonew += rhoY\(i, j, k, nsp\);) N
(            }) N
() N
(            ) S
(if) K
( \(do_update\) {) p n
(              snew_arr\(i, j, k, URHO\) = rhonew;) N
(              snew_arr\(i, j, k, UMX\) = umnew;) N
(              snew_arr\(i, j, k, UMY\) = vmnew;) N
(              snew_arr\(i, j, k, UMZ\) = wmnew;) N
() N
(              ) S
(for) K
( \() p
(int) k
( nsp = 0; nsp < NUM_SPECIES; nsp++\) {) p n
(                snew_arr\(i, j, k, UFS + nsp\) = rhoY\(i, j, k, nsp\);) N
(              }) N
(              snew_arr\(i, j, k, UTEMP\) = T\(i, j, k\);) N
() N
(              snew_arr\(i, j, k, UEINT\) = rho_old * e_old + dt * rhoedot_ext;) N
(              snew_arr\(i, j, k, UEDEN\) =) N
(                snew_arr\(i, j, k, UEINT\) +) N
(                0.5 * \(umnew * umnew + vmnew * vmnew + wmnew * wmnew\) / rhonew;) N
(            }) N
() N
(            ) S
(for) K
( \() p
(int) k
( nsp = 0; nsp < NUM_SPECIES; nsp++\) {) p n
(              I_R\(i, j, k, nsp\) = \(rhoY\(i, j, k, nsp\)              ) S
(// new rhoy) c n
(                                   - sold_arr\(i, j, k, UFS + nsp\)\) ) p
(// old rhoy) c n
(                                    / dt -) p n
(                                  nonrs_arr\(i, j, k, UFS + nsp\);) N
(React.cpp) (Page 4/5) (Dec 01, 22 11:33) title
border
grestore
(Printed by Jay Standridge) rhead
(React.cpp) (2/3) (Monday February 06, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            }) p n
() N
(            I_R\(i, j, k, NUM_SPECIES\) =) N
(              \(rho_old * e_old + dt * rhoedot_ext ) S
(// new internal energy) c n
(               + 0.5 * \(umnew * umnew + vmnew * vmnew + wmnew * wmnew\) /) p n
(                   rhonew                  ) S
(// new KE) c n
(               - sold_arr\(i, j, k, UEDEN\)\) ) p
(// old total energy) c n
(                / dt -) p n
(              nonrs_arr\(i, j, k, UEDEN\);) N
(          }\);) N
() N
(        wt = \(amrex::ParallelDescriptor::second\(\) - wt\) / bx.d_numPts\(\);) N
() N
(        ) S
(if) K
( \(do_react_load_balance\) {) p n
(          ) S
(const) K
( amrex::Box vbox = mfi.tilebox\(\);) p n
(          get_new_data\(Work_Estimate_Type\)[mfi].plus<amrex::RunOn::Device>\() N
(            wt, vbox\);) N
(        }) N
() N
(        ) S
(// update heat release) c n
(        amrex::ParallelFor\() p n
(          bx, [=] AMREX_GPU_DEVICE\() S
(int) k
( i, ) p
(int) k
( j, ) p
(int) k
( k\) noexcept {) p n
(            I_R\(i, j, k, NUM_SPECIES + 1\) = 0.0;) N
(            ) S
(auto) K
( eos = pele::physics::PhysicsType::eos\(\);) p n
() N
(            amrex::Real hi[NUM_SPECIES] = {0.0};) N
() N
(            amrex::Real Yspec[NUM_SPECIES] = {0.0};) N
(            ) S
(for) K
( \() p
(int) k
( nsp = 0; nsp < NUM_SPECIES; nsp++\) {) p n
(              Yspec[nsp] =) N
(                snew_arr\(i, j, k, UFS + nsp\) / snew_arr\(i, j, k, URHO\);) N
(            }) N
(            eos.RTY2Hi\() N
(              snew_arr\(i, j, k, URHO\), snew_arr\(i, j, k, UTEMP\), Yspec, hi\);) N
() N
(            ) S
(for) K
( \() p
(int) k
( nsp = 0; nsp < NUM_SPECIES; nsp++\) {) p n
(              I_R\(i, j, k, NUM_SPECIES + 1\) -= hi[nsp] * I_R\(i, j, k, nsp\);) N
(            }) N
(          }\);) N
(      }) N
(    }) N
(  }) N
() N
(  ) S
(if) K
( \(ng > 0\) {) p n
(    S_new.FillBoundary\(geom.periodicity\(\)\);) N
(  }) N
() N
(  ) S
(if) K
( \(verbose > 1\) {) p n
(    ) S
(const) K
( ) p
(int) k
( IOProc = amrex::ParallelDescriptor::IOProcessorNumber\(\);) p n
(    amrex::Real run_time = amrex::ParallelDescriptor::second\(\) - strt_time;) N
() N
(    amrex::ParallelDescriptor::ReduceRealMax\(run_time, IOProc\);) N
() N
(    ) S
(if) K
( \(amrex::ParallelDescriptor::IOProcessor\(\)\) {) p n
(      amrex::Print\(\) << ") S
(PeleC::react_state\(\) time = ) str
(" << run_time << ") p
(\\n) str
(";) p n
(    }) N
(  }) N
(}) N
(React.cpp) (Page 5/5) (Dec 01, 22 11:33) title
border
grestore
(Printed by Jay Standridge) rhead
(React.cpp) (3/3) (Monday February 06, 2023) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
